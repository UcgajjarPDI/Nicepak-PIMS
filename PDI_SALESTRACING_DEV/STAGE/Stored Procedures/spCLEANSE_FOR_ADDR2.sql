CREATE PROCEDURE [STAGE].[spCLEANSE_FOR_ADDR2] 
WITH EXEC AS CALLER
AS
BEGIN

  -- Take out floors from Addr Line 1

  UPDATE T
    SET ADDR_2_CNDT = ADDR_STD,
    ADDR1 = STAGE.fnGet_FirstPart(ADDR1,CHARINDEX(' '+A.ADDR_VAR, ADDR1)),
    ST_1 = STAGE.fnGet_FirstPart(ST_1,CHARINDEX(' '+A.ADDR_VAR, ST_1))
  FROM STAGE.TEMP_ADDR_LAUNDRY T
  JOIN REF.ADDR_STD A ON ST_1 LIKE '% '+A.ADDR_VAR+'%'
  WHERE CAT LIKE 'ADDR2%'
  AND ADDR_TYP = 'FLOOR';

  UPDATE T
    SET
      ADDR_2_CNDT = ADDR_STD, 
      ADDR1 = NULL  , 
      ST_1 = NULL            
  FROM STAGE.TEMP_ADDR_LAUNDRY T
  JOIN REF.ADDR_STD A ON ST_1 LIKE A.ADDR_VAR+'%'
  WHERE ST_1 IS NOT NULL AND CAT LIKE 'ADDR2%'
  AND ADDR_TYP = 'FLOOR';
  
  -- Take out floors from Addr Line 2
  
  UPDATE T
    SET ADDR_2_CNDT = ADDR_STD,
    ADDR1 = STAGE.fnGet_FirstPart(ADDR1,CHARINDEX(' '+A.ADDR_VAR, ADDR1)),
    ST_2 = STAGE.fnGet_FirstPart(ST_2,CHARINDEX(' '+A.ADDR_VAR, ST_2))
  FROM STAGE.TEMP_ADDR_LAUNDRY T
  JOIN REF.ADDR_STD A ON ST_2 LIKE '% '+A.ADDR_VAR+'%'
  WHERE CAT LIKE 'ADDR2%'
  AND ADDR_TYP = 'FLOOR';

  UPDATE T
    SET
      ADDR_2_CNDT = ADDR_STD, ADDR1 = NULL  , 
      ST_2 = NULL            
  FROM STAGE.TEMP_ADDR_LAUNDRY T
  JOIN REF.ADDR_STD A ON ST_2 LIKE A.ADDR_VAR+'%'
  WHERE ST_2 IS NOT NULL AND CAT LIKE 'ADDR2%'
  AND ADDR_TYP = 'FLOOR';
  
  -- Remove what should be in Addr Line 2 but addr1 starts with it
  UPDATE T
    SET
      ADDR_2_CNDT = CASE  WHEN A.CAT = 'ADDR2_KEEP' THEN RIGHT( ADDR1 ,LEN( ADDR1)-charindex(A.ADDR_VAR, ADDR1)+1)
                          WHEN A.CAT = 'ADDR2_REMOVE' THEN NULL END,
      ST_1 = NULL ,ADDR1 = NULL
  FROM STAGE.TEMP_ADDR_LAUNDRY T
  JOIN REF.ADDR_STD A ON  ADDR1 LIKE A.ADDR_VAR+'%' AND charindex(A.ADDR_VAR, ADDR1)>0
  WHERE 
   ADDR1 IS NOT NULL 
  AND A.CAT LIKE 'ADDR2%';
  
  
  -- Do the same for Addr Line 2 
  UPDATE T
    SET
      ADDR_2_CNDT = CASE  WHEN A.CAT = 'ADDR2_KEEP' THEN RIGHT( ADDR2 ,LEN( ADDR2)-charindex(A.ADDR_VAR, ADDR2)+1)
                          WHEN A.CAT = 'ADDR2_REMOVE' THEN NULL END,
      ST_2 = NULL ,ADDR2 = NULL
  FROM STAGE.TEMP_ADDR_LAUNDRY T
  JOIN REF.ADDR_STD A ON  ADDR2 LIKE A.ADDR_VAR+'%' AND charindex(A.ADDR_VAR, ADDR2)>0
  WHERE 
  ADDR2 IS NOT NULL 
  AND A.CAT LIKE 'ADDR2%';
  
  -- Remove junk or what should be in address 2, but is inside addr1 or 2
  
  UPDATE T
    SET 
      ADDR_2_CNDT = CASE  WHEN A.CAT = 'ADDR2_KEEP' THEN RIGHT(ADDR1 ,LEN(ADDR1)-charindex(A.ADDR_VAR,ADDR1)+1)
                          WHEN A.CAT= 'ADDR2_REMOVE' THEN NULL END,
      ADDR1 = STAGE.fnGet_FirstPart(ADDR1,CHARINDEX(' '+A.ADDR_VAR, ADDR1)),    --- REMOVE THIS ONE IF NOT NEEDED
      ST_1 = STAGE.fnGet_FirstPart(ST_1 ,CHARINDEX(' '+A.ADDR_VAR, ST_1)) 
  FROM STAGE.TEMP_ADDR_LAUNDRY T
  JOIN REF.ADDR_STD A ON ADDR1 LIKE '% '+A.ADDR_VAR+'%'  AND charindex(A.ADDR_VAR,ADDR1)>0
  WHERE 
  ADDR1 IS NOT NULL 
  AND A.CAT LIKE 'ADDR2%'; 
  
  UPDATE T
    SET 
      ADDR_2_CNDT = CASE  WHEN A.CAT = 'ADDR2_KEEP' THEN RIGHT(ADDR2 ,LEN(ADDR2)-charindex(A.ADDR_VAR,ADDR2)+1)
                          WHEN A.CAT= 'ADDR2_REMOVE' THEN NULL END,
      ADDR2 = STAGE.fnGet_FirstPart(ADDR2,CHARINDEX(' '+A.ADDR_VAR, ADDR2)),    --- REMOVE THIS ONE IF NOT NEEDED
      ST_2 = STAGE.fnGet_FirstPart(ST_2 ,CHARINDEX(' '+A.ADDR_VAR, ST_2)) 
  FROM STAGE.TEMP_ADDR_LAUNDRY T
  JOIN REF.ADDR_STD A ON ADDR2 LIKE '% '+A.ADDR_VAR+'%'  AND charindex(A.ADDR_VAR,ADDR2)>0
  WHERE 
  ADDR2 IS NOT NULL 
  AND A.CAT LIKE 'ADDR2%';
     
    -- MAKE THE ADDR2 STANDARD - Suite to STE, Building to BLDG
    
    UPDATE E
      SET ADDR_2_CNDT = REPLACE(ADDR_2_CNDT,LEFT(ADDR_2_CNDT,charindex(' ',ADDR_2_CNDT)),A.ADDR_STD)
    FROM STAGE.TEMP_ADDR_LAUNDRY E
    JOIN REF.ADDR_STD A ON LTRIM(RTRIM(LEFT(ADDR_2_CNDT,charindex(' ',ADDR_2_CNDT)))) = A.ADDR_VAR
    WHERE ADDR_2_CNDT IS NOT NULL 
    AND CAT = 'ADDR2_KEEP'
      ;
    -- This will take care of Floor
    UPDATE E
      SET ADDR_2_CNDT = A.ADDR_STD
    FROM STAGE.TEMP_ADDR_LAUNDRY E
    JOIN REF.ADDR_STD A ON LTRIM(RTRIM(ADDR_2_CNDT)) = A.ADDR_VAR
    WHERE 
    ADDR_2_CNDT IS NOT NULL
    AND CAT = 'ADDR2_KEEP';

END