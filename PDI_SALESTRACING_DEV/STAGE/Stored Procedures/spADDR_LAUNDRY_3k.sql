CREATE PROCEDURE [STAGE].[spADDR_LAUNDRY_3k] 
@ID INT = NULL
WITH EXEC AS CALLER
AS
BEGIN  

  --SELECT TOP 1000 * FROM STAGE.TEMP_ADDR_LAUNDRY

-- First load the ID, Name and addresses to temp laundry table for cleaning 
-- Take comment out once we are done with developing the stored proc

INSERT INTO STAGE.TEMP_ADDR_LAUNDRY( TRC_ENDUSER_1_ID, DISTACCTSHIPNAME, ORIG_ADDR1, ORIG_ADDR2, ADDR1, ADDR2, CITY, STATE, ZIP )
SELECT TRC_ENDUSER_1_ID, DISTACCTSHIPNAME, DISTACCTSHIPADDR1, DISTACCTSHIPADDR2 ,DISTACCTSHIPADDR1, DISTACCTSHIPADDR2 , DISTACCTSHIPCITY, DISTACCTSHIPSTATE, LEFT(DISTACCTSHIPZIP,5)
FROM STAGE.TRC_ENDUSER_3K
WHERE TRC_ENDUSER_1_ID = ISNULL(@ID ,TRC_ENDUSER_1_ID );
;

-- If both Addr1 and Addr2 is same then delete Addr2 
  UPDATE STAGE.TEMP_ADDR_LAUNDRY
    SET ADDR2 = NULL
  WHERE ADDR1 = ADDR2
  AND TRC_ENDUSER_1_ID = ISNULL(@ID ,TRC_ENDUSER_1_ID );

-- Remove all extra spaces from the fields
UPDATE STAGE.TEMP_ADDR_LAUNDRY
  SET 
    DISTACCTSHIPNAME = STAGE.fnRemoveSpace_SpChar(DISTACCTSHIPNAME), 
    ADDR1 = STAGE.fnRemoveSpace_SpChar(ADDR1), 
    ADDR2 = STAGE.fnRemoveSpace_SpChar(ADDR2)
    WHERE TRC_ENDUSER_1_ID = ISNULL(@ID ,TRC_ENDUSER_1_ID );
    
-- IF Address Line 1 is NULL but Address Line 2 has a value - switch
UPDATE STAGE.TEMP_ADDR_LAUNDRY
  SET 
    ADDR1 = ADDR2,
    ADDR2 = NULL
  WHERE  ADDR1 IS NULL AND ADDR2 IS NOT NULL
  AND TRC_ENDUSER_1_ID = ISNULL(@ID ,TRC_ENDUSER_1_ID );
  
-- Detect and assign proper value for Null or ZIP address line
  UPDATE STAGE.TEMP_ADDR_LAUNDRY
  SET ADDR1 = 'NO ADDRESS'
  WHERE  ADDR1 IS NULL AND ADDR2 IS NULL
  AND TRC_ENDUSER_1_ID = ISNULL(@ID ,TRC_ENDUSER_1_ID );
  
  UPDATE STAGE.TEMP_ADDR_LAUNDRY
  SET ADDR1 = 'NO ADDRESS'
  WHERE  ADDR1 LIKE 'ZIP%'  AND ADDR2 IS NULL
  AND TRC_ENDUSER_1_ID = ISNULL(@ID ,TRC_ENDUSER_1_ID );
  
-- Change all string numbers to numeric. It will help to find street numbers in next step
  UPDATE C
  SET  ADDR1 =
    CONVERT(VARCHAR(10),N.NBR_NUM)+' '+ RIGHT(C.ADDR1 ,LEN(C.ADDR1)-charindex(' ',C.ADDR1 ))
  FROM 
    STAGE.TEMP_ADDR_LAUNDRY C, 
    REF.NBR_CNVRTR N
  WHERE 
    C.ADDR1 IS NOT NULL AND charindex(' ',C.ADDR1) > 0
    AND ISNUMERIC(LEFT(C.ADDR1,charindex(' ',C.ADDR1)-1)) = 0
    AND LEFT(C.ADDR1,charindex(' ',C.ADDR1)-1) = N.NBR_STR 
    AND TRC_ENDUSER_1_ID = ISNULL(@ID ,TRC_ENDUSER_1_ID );
    
  UPDATE C
    SET  ADDR2 =
    CONVERT(VARCHAR(10),N.NBR_NUM)+' '+ RIGHT(C.ADDR2 ,LEN(C.ADDR2)-charindex(' ',C.ADDR2 ))
  FROM 
    STAGE.TEMP_ADDR_LAUNDRY C, 
    REF.NBR_CNVRTR N
  WHERE 
    C.ADDR2 IS NOT NULL AND charindex(' ',C.ADDR2) > 0
    AND ISNUMERIC(LEFT(C.ADDR2,charindex(' ',C.ADDR2)-1)) = 0
    AND LEFT(C.ADDR2,charindex(' ',C.ADDR2)-1) = N.NBR_STR 
    AND TRC_ENDUSER_1_ID = ISNULL(@ID ,TRC_ENDUSER_1_ID );

-- Grab numbers from Addr1 and Addr 2 - and populate to str_nr

  UPDATE STAGE.TEMP_ADDR_LAUNDRY
    SET 
      ST_NR_1 = STAGE.fnFirstWord(ADDR1),
      ST_1 = STAGE.fnSecondPart(ADDR1,Len(STAGE.fnFirstWord(ADDR1))+1)
  WHERE ISNUMERIC(STAGE.fnFirstWord(ADDR1)) = 1
  AND TRC_ENDUSER_1_ID = ISNULL(@ID ,TRC_ENDUSER_1_ID );
  
  UPDATE STAGE.TEMP_ADDR_LAUNDRY
    SET 
      ST_NR_2 = STAGE.fnFirstWord(ADDR2),
      ST_2 = STAGE.fnSecondPart(ADDR2,Len(STAGE.fnFirstWord(ADDR2))+1)
  WHERE ISNUMERIC(STAGE.fnFirstWord(ADDR2)) = 1 
  AND TRC_ENDUSER_1_ID = ISNULL(@ID ,TRC_ENDUSER_1_ID );

 
  UPDATE STAGE.TEMP_ADDR_LAUNDRY SET ST_1 = STAGE.fnSecondPart(ADDR1,Len(ST_NR_1)+1)
  WHERE Len(ST_NR_1)>0;
  
  UPDATE STAGE.TEMP_ADDR_LAUNDRY SET ST_2 = STAGE.fnSecondPart(ADDR2,Len(ST_NR_2)+1)
  WHERE Len(ST_NR_2)>0
  AND TRC_ENDUSER_1_ID = ISNULL(@ID ,TRC_ENDUSER_1_ID ); 

-- Move SUITE, FLOOR etc number etc from ADDR1
  EXEC [STAGE].[spCLEANSE_FOR_ADDR2];


-- Find the street type and street name
  EXEC [STAGE].[spCLEANSE_FOR_ROADWAY];


-- MAKE FINAL UPDATED ADDRESS
-- NEED TO FIX ST_1, AND/OR SUFFIX FOR DORECTIONS N, W, 

  UPDATE T
    SET T.SUFFIX = REPLACE(SUFFIX,A.ADDR_VAR, A.ADDR_STD) ,
    SUFFIX_VLD_IN  = 'Y'
  FROM STAGE.TEMP_ADDR_LAUNDRY T
  JOIN REF.ADDR_STD A ON LTRIM(RTRIM(SUFFIX)) = A.ADDR_VAR
  WHERE SUFFIX IS NOT NULL 
  AND ADDR_TYP = 'DIRECTION';
  
  UPDATE T
    SET T.SUFFIX = REPLACE(SUFFIX,A.ADDR_VAR, A.ADDR_STD),
    SUFFIX_VLD_IN  = 'Y'
  FROM STAGE.TEMP_ADDR_LAUNDRY T
  JOIN REF.ADDR_STD A ON LTRIM(RTRIM(STAGE.fnFirstWord(SUFFIX))) = A.ADDR_VAR
  WHERE SUFFIX IS NOT NULL 
  AND CAT = 'Roadway';
  
   UPDATE STAGE.TEMP_ADDR_LAUNDRY
    SET SUFFIX_VLD_IN  = 'Y'
  FROM STAGE.TEMP_ADDR_LAUNDRY T
  WHERE ISNUMERIC(LTRIM(RTRIM(STAGE.fnFirstWord(SUFFIX)))) = 1
  AND LEFT(LTRIM(RTRIM(SUFFIX)),1) NOT IN ('-','+','$');
  
  UPDATE T
    SET T.SUFFIX = REPLACE(SUFFIX,A.ADDR_VAR, A.ADDR_STD) 
  FROM STAGE.TEMP_ADDR_LAUNDRY T
  JOIN REF.ADDR_STD A ON LTRIM(RTRIM(SUFFIX)) LIKE '% '+A.ADDR_VAR
  WHERE SUFFIX IS NOT NULL 
  AND ADDR_TYP = 'DIRECTION'
  AND ST_NR_1 IS NOT NULL
  AND SUFFIX_VLD_IN  = 'Y';

  -- REMOVE BUILDING SUITES ETC FROM SUFFIX FOR VALID SUFFIXES
  UPDATE T
    SET ADDR_2_CNDT = CASE WHEN ADDR_2_CNDT IS NULL THEN ADDR_STD ELSE ADDR_2_CNDT END,
    SUFFIX = STAGE.fnGet_FirstPart(SUFFIX,CHARINDEX(' '+A.ADDR_VAR, SUFFIX))
  FROM STAGE.TEMP_ADDR_LAUNDRY T
  JOIN REF.ADDR_STD A ON SUFFIX LIKE '% '+A.ADDR_VAR+'%'
  WHERE CAT LIKE 'ADDR2%'
  AND ADDR_TYP = 'FLOOR'
  AND SUFFIX_VLD_IN  = 'Y';

  UPDATE T
    SET 
      ADDR_2_CNDT = CASE  WHEN A.CAT = 'ADDR2_KEEP' AND ADDR_2_CNDT IS NULL 
                          THEN RIGHT(SUFFIX,LEN(SUFFIX)-charindex(A.ADDR_VAR,SUFFIX)+1) 
                          ELSE ADDR_2_CNDT  END,
      SUFFIX = STAGE.fnGet_FirstPart(SUFFIX,CHARINDEX(' '+A.ADDR_VAR, SUFFIX))
  FROM STAGE.TEMP_ADDR_LAUNDRY T
  JOIN REF.ADDR_STD A ON SUFFIX LIKE '% '+A.ADDR_VAR+'%'  AND charindex(A.ADDR_VAR,SUFFIX)>0
  WHERE 
  ADDR1 IS NOT NULL 
  AND A.CAT LIKE 'ADDR2%'
  AND SUFFIX_VLD_IN  = 'Y';
  
      -- MAKE THE ADDR2 STANDARD - Suite to STE, Building to BLDG
    
    UPDATE E
      SET ADDR_2_CNDT = REPLACE(ADDR_2_CNDT,LEFT(ADDR_2_CNDT,charindex(' ',ADDR_2_CNDT)),A.ADDR_STD)
    FROM STAGE.TEMP_ADDR_LAUNDRY E
    JOIN REF.ADDR_STD A ON LTRIM(RTRIM(LEFT(ADDR_2_CNDT,charindex(' ',ADDR_2_CNDT)))) = A.ADDR_VAR
    WHERE ADDR_2_CNDT IS NOT NULL 
    AND CAT = 'ADDR2_KEEP'
      ;
    -- This will take care of Floor
    UPDATE E
      SET ADDR_2_CNDT = A.ADDR_STD
    FROM STAGE.TEMP_ADDR_LAUNDRY E
    JOIN REF.ADDR_STD A ON LTRIM(RTRIM(ADDR_2_CNDT)) = A.ADDR_VAR
    WHERE 
    ADDR_2_CNDT IS NOT NULL
    AND CAT = 'ADDR2_KEEP';
    
    ----------------------------------------------------------------

  UPDATE STAGE.TEMP_ADDR_LAUNDRY 
    SET UPD_ADDR1 = STAGE.fnRemoveSpace (ST_NR_1+' '+ST_NM_1+' '+ST_TYP_1 
        + ' '+CASE WHEN SUFFIX_VLD_IN  = 'Y' THEN SUFFIX ELSE '' END)
  WHERE ADDR_SRCE = 1  ;
  
  UPDATE STAGE.TEMP_ADDR_LAUNDRY 
    SET UPD_ADDR1 = STAGE.fnRemoveSpace (ST_NR_2+' '+ST_NM_2+' '+ST_TYP_2 
        + ' '+CASE WHEN SUFFIX_VLD_IN  = 'Y' THEN SUFFIX ELSE '' END)
  WHERE ADDR_SRCE = 2
  AND UPD_ADDR1 IS NULL ;
  
  UPDATE STAGE.TEMP_ADDR_LAUNDRY 
    SET UPD_ADDR2 = STAGE.fnRemoveSpace (ADDR_2_CNDT)  --- WE dont need this second filed, we could save it to upd_addr2 from begining
  WHERE ADDR_2_CNDT IS NOT NULL;
  
  UPDATE STAGE.TEMP_ADDR_LAUNDRY 
    SET UPD_ADDR1 = STAGE.fnRemoveSpace (ST_NR_1+' '+ST_1)
  WHERE ST_NR_1 IS NOT NULL AND UPD_ADDR1 IS NULL  ;
  
  UPDATE STAGE.TEMP_ADDR_LAUNDRY 
    SET UPD_ADDR1 = STAGE.fnRemoveSpace (ST_NR_2+' '+ST_2)
  WHERE ST_NR_2 IS NOT NULL AND UPD_ADDR1 IS NULL  ;
  
  UPDATE STAGE.TEMP_ADDR_LAUNDRY 
    SET UPD_ADDR1 = 'NO ADDRESS'
  WHERE ORIG_ADDR1 = 'NO ADDRESS'
  AND UPD_ADDR1 IS NULL;
  
  UPDATE STAGE.TEMP_ADDR_LAUNDRY 
    SET UPD_ADDR1 = 'INVALID ADDRESS'
  WHERE UPD_ADDR1 IS NULL;
  
  UPDATE T 
    SET T.CITY = Z.City
  FROM STAGE.TEMP_ADDR_LAUNDRY T
  JOIN REF.ZIP_CODE Z ON LEFT(LTRIM(T.ZIP),5) = Z.Zipcode AND Z.LocationType = 'PRIMARY'
  WHERE T.CITY=Z.City;
  
  UPDATE T
    SET T.UPD_ADDR1 = UPPER(S.UPD_ADDR1),
     T.UPD_ADDR2 = UPPER(S.UPD_ADDR2)
  FROM STAGE.TRC_ENDUSER_3K T
  JOIN STAGE.TEMP_ADDR_LAUNDRY S ON T.TRC_ENDUSER_1_ID = S.TRC_ENDUSER_1_ID;
  
  TRUNCATE TABLE STAGE.TEMP_ADDR_LAUNDRY;
  
-- run a location search in all

-- then look for street type - standardize and keep it in st_typ

-- anything after that keep it in another column

-- anything before that is in str nm column

-- staradize street nm

-- concatenate and get street UPD_ADDR1

-- then look for number in text and populate str nr

-- for the remaning look for street adress in ADDR2_2

-- ste, flr etc in temp field 

--- extract suite, floor etc and populate upd_addr2

-- Update the main table

-- Truncate the laundry

  END;