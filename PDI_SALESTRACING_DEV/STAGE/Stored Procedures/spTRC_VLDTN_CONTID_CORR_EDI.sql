CREATE PROCEDURE [STAGE].[spTRC_VLDTN_CONTID_CORR_EDI] @vSalesPeriod VARCHAR(10)

WITH EXEC AS CALLER
AS
BEGIN

-- RESET UPDATED CONTRACT ID
UPDATE [PDI_SALESTRACING_TEST].STAGE.SALES_TRACING_VALDN
SET [Updated Contract ID] = NULL
WHERE [Updated Contract ID] IS NOT NULL
AND [SALES PERIOD] = @vSalesPeriod;
 
UPDATE [PDI_SALESTRACING_TEST].STAGE.SALES_TRACING_VALDN
SET [Updated Contract ID] = [TRC Contract ID]
WHERE [SALES PERIOD] = @vSalesPeriod
AND LEN([TRC Contract ID]) > 0;

-- RESET REBATE CONTRACT ID

UPDATE [PDI_SALESTRACING_TEST].STAGE.SALES_TRACING_VALDN
SET [RBT Contract ID] = NULL
WHERE [RBT Contract ID] IS NOT NULL
AND [SALES PERIOD] = @vSalesPeriod;
 
UPDATE [PDI_SALESTRACING_TEST].STAGE.SALES_TRACING_VALDN
SET [RBT Contract ID] = [TRC Contract ID]
WHERE [SALES PERIOD] = @vSalesPeriod
AND LEN([TRC Contract ID]) > 0;

--- RESET UPDATED PROD ID

UPDATE [PDI_SALESTRACING_TEST].STAGE.SALES_TRACING_VALDN
SET [Updated Prod ID] = NULL
WHERE [Updated Prod ID] IS NOT NULL
AND [SALES PERIOD] = @vSalesPeriod;
 
UPDATE [PDI_SALESTRACING_TEST].STAGE.SALES_TRACING_VALDN
SET [Updated Prod ID] = [TRC Prod ID]
WHERE [SALES PERIOD] = @vSalesPeriod;

--- PRODUCT ID ISSUE, 
--- This should be part of my correction table
--- if product ID has issue, we need to create an exception report right here

  --- Current Exception Table will be populated only if it is not there in history table

INSERT INTO [PDI_SALESTRACING_TEST].[STAGE].[TRC_EXCEPTION_SUMMARY_CURR]
([EXCEPTION TYPE], [EXCEPTION VALUE], [DISTRIBUTOR], [INV Year-Month], [TRC Contract ID], [INVOICE COUNT])
SELECT DISTINCT 
'Invalid product ID' AS [EXCEPTION TYPE], S.[TRC Prod ID] AS [EXCEPTION VALUE], S.DISTID, 
LEFT(S.[nInvoice Date], 6) AS [INV Year-Month], 
S.[TRC Contract ID], COUNT(DISTINCT S.[Invoice ID]) as [INVOICE COUNT]
FROM  [PDI_SALESTRACING_TEST].[STAGE].[SALES_TRACING_VALDN] S
LEFT JOIN [PDI_SALESTRACING_TEST].[STAGE].LIST_PRICE L ON S.[TRC Prod ID] = L.[ITEM NO]
WHERE L.[ITEM NO] IS NULL
AND S.[TRC Prod ID] NOT IN
  (SELECT DISTINCT [TRC Prod ID] FROM [PDI_SALESTRACING_TEST].[STAGE].[TRC_EXCEPTION_SUMMARY_HIST])
AND S.[SALES PERIOD] = @vSalesPeriod
GROUP BY S.[TRC Prod ID], S.DISTID, LEFT(S.[nInvoice Date], 6), S.[TRC Contract ID];

-- History Exception Table

TRUNCATE TABLE [PDI_SALESTRACING_TEST].[STAGE].[TRC_EXCEPTION_SUMMARY_HIST] 
-- Should be a merge statement

INSERT INTO [PDI_SALESTRACING_TEST].[STAGE].[TRC_EXCEPTION_SUMMARY_HIST]
([EXCEPTION TYPE], [EXCEPTION VALUE], [DISTRIBUTOR], [INV Year-Month], [TRC Contract ID], [INVOICE COUNT])
SELECT DISTINCT 
'Invalid product ID' AS [EXCEPTION TYPE], S.[TRC Prod ID] AS [EXCEPTION VALUE], S.DISTID, 
LEFT(S.[nInvoice Date], 6) AS [INV Year-Month], 
S.[TRC Contract ID], COUNT(DISTINCT S.[Invoice ID]) as [INVOICE COUNT]
FROM  [PDI_SALESTRACING_TEST].[STAGE].[SALES_TRACING_VALDN] S
LEFT JOIN [PDI_SALESTRACING_TEST].[STAGE].LIST_PRICE L ON S.[TRC Prod ID] = L.[ITEM NO]
WHERE L.[ITEM NO] IS NULL
AND S.[SALES PERIOD] = @vSalesPeriod
GROUP BY S.[TRC Prod ID], S.DISTID, LEFT(S.[nInvoice Date], 6), S.[TRC Contract ID]
ORDER BY 6 DESC;

---  Correction of known prod ID issues
---  THIS SHOULD BE FROM A CORRECTION TABLE which should be populated from analyst input AND NOT HARDCODED

UPDATE [PDI_SALESTRACING_TEST].[STAGE].[SALES_TRACING_VALDN]
SET [Updated Prod ID] = RIGHT([TRC Prod ID],6)
WHERE [TRC Prod ID] IN
('4725B10800','4725B40600','4725D41900','4725J14143','4725P03672','4725S42450','PDI D35185','PDI D43600')
AND [SALES PERIOD] = @vSalesPeriod;

UPDATE [PDI_SALESTRACING_TEST].[STAGE].[SALES_TRACING_VALDN]
SET [Updated Prod ID] = RTRIM(LTRIM(RIGHT([TRC Prod ID],LEN([TRC Prod ID])-LEN('PROMO'))))
WHERE [TRC Prod ID] LIKE 'PROMO%';

/*
UPDATE [PDI_SALESTRACING_TEST].[STAGE].[SALES_TRACING_VALDN]
SET [TRC Prod ID] = 'Q387S40'
WHERE [TRC Prod ID] = 'Q387S40NY'; 

-- Following is to take care of OWENS using wrong prdouct + contract combo -- needs further validation -- 

UPDATE [PDI_SALESTRACING_TEST].[STAGE].[SALES_TRACING_VALDN]
SET [TRC Prod ID] = 'Q387S40'
WHERE [TRC Prod ID] = 'Q387S40NY' 
AND [TRC Contract ID] IN ('CNT1624','CNT1625') ; */

UPDATE [PDI_SALESTRACING_TEST].[STAGE].[SALES_TRACING_VALDN]
SET [Updated Prod ID] = 'J14143'
WHERE [TRC Prod ID] = '44631300';

-- CORRECTION TABLE
-- FROM CORRECTION TABLE 

UPDATE S
SET S.[Updated Contract ID] = C.[TO VALUE]
FROM [PDI_SALESTRACING_TEST].STAGE.SALES_TRACING_VALDN S
JOIN [PDI_SALESTRACING_TEST].STAGE.CORRECTION_XREF_SHRT C
ON C.[DIST NO] = S.[DIST NO] AND C.ITEMID = S.[TRC Prod ID] 
AND C.[FROM VALUE] = S.[Updated Contract ID]
WHERE C.[COR TYPE] = 'CONT'
AND [SALES PERIOD] = @vSalesPeriod;

UPDATE S
SET S.[RBT Contract ID] = C.[TO VALUE]
FROM [PDI_SALESTRACING_TEST].STAGE.SALES_TRACING_VALDN S
JOIN [PDI_SALESTRACING_TEST].STAGE.CORRECTION_XREF_SHRT C
ON C.[DIST NO] = S.[DIST NO] AND C.ITEMID = S.[TRC Prod ID] 
AND C.[FROM VALUE] = S.[RBT Contract ID]
WHERE C.[COR TYPE] = 'TCNT'
AND [SALES PERIOD] = @vSalesPeriod;

-- VALUE CENTRIC OVER RIDE TABLE

UPDATE S
SET S.[Updated Contract ID] = C.[OVRD_CONT]
FROM [PDI_SALESTRACING_TEST].STAGE.SALES_TRACING_VALDN S
JOIN [PDI_SALESTRACING_TEST].[STAGE].CONT_OVERRIDE C
ON C.[DIST_CONT] = S.[TRC Contract ID]
AND C.[ITEM] = S.[TRC Prod ID] 
WHERE S.[TRC Price Type] = 'CONT'
AND S.[Updated Contract ID] = S.[TRC Contract ID] -- meaning thease are rows not changed it by previoud update stmt
AND [SALES PERIOD] = @vSalesPeriod;



/*
UPDATE [PDI_SALESTRACING_TEST].STAGE.SALES_TRACING_VALDN
SET [TRC Contract ID] = 'CNT2616'
WHERE [TRC Prod ID] = 'P13472' AND [TRC Contract ID] = 'CNT2464';

UPDATE [PDI_SALESTRACING_TEST].STAGE.SALES_TRACING_VALDN
SET [TRC Contract ID] = 'CNT2364'
WHERE [TRC Prod ID] = 'P54072' AND [TRC Contract ID] = 'CNT2605'; */
 
 END
