CREATE PROCEDURE [TRC].[spUPDATE_SLS_TRC_LOAD_DTL] 
( @vSales_Period VARCHAR(10))
WITH EXEC AS CALLER
AS
BEGIN

  UPDATE D
  SET D.CS_QTY = I.CS_QTY, D.SALES_AMT = I.SALES_AMT, D.EXCP_COUNT = I.EXCEPTION
  FROM STAGE.SLS_TRC_LOAD_DTL D 
  JOIN
    ( SELECT C.LOAD_ID, SUM(C.UPD_CS_QTY) CS_QTY, 
    SUM(C.UPD_SALES_AMT) SALES_AMT, COUNT(*) REC_CNT
    ,SUM(CASE WHEN C.ERR_CD  IS NOT NULL 
    THEN 1 ELSE 0 END) EXCEPTION
  FROM STAGE.SALES_TRACING_CURR C
  WHERE C.SALES_PERIOD = @vSales_Period
  GROUP BY C.LOAD_ID) I
  ON D.LOAD_ID = I.LOAD_ID ;

UPDATE D
  SET 
    D.ROLLING_6_MN_AV_QTY = S.CS_QTY_6MO_AVG,
    D.ROLLING_12_MN_AV_QTY = S.CS_QTY_12MO_AVG,
    D.ROLLING_6_MN_AV_AMT = S.SALES_AMT_6MO_AVG,
    D.ROLLING_12_MN_AV_AMT = S.SALES_AMT_12MO_AVG
FROM STAGE.SLS_TRC_LOAD_DTL D 
JOIN STAGE.DATA_LOAD_SUMMARY S ON D.SALES_PERIOD = S.SALESPERIOD AND D.DIST_ID = S.DIST_NR
WHERE D.SALES_PERIOD = @vSales_Period

-- UPDATE SALES PERIOD IN THE DATA LOAD SUMMARY 
-- PENDING - LATER -- ADD OUR OWN CALUCLATION FOR SUM - BY JUST REMOVING THE SALES PERIOD FILTER BELOW
  UPDATE S
    SET S.SALES_AMT = D.SLS_AMT 
  FROM STAGE.DATA_LOAD_SUMMARY S
  JOIN ( SELECT SALES_PERIOD, DIST_ID ,  SUM(SALES_AMT) SLS_AMT 
         FROM STAGE.SLS_TRC_LOAD_DTL 
         WHERE SALES_PERIOD = @vSales_Period 
         GROUP BY SALES_PERIOD, DIST_ID) D 
    ON D.SALES_PERIOD = S.SALESPERIOD AND D.DIST_ID = S.DIST_NR
  WHERE S.SALESPERIOD = @vSales_Period 


END